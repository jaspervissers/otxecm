########################################################################
# Default values for Helm Chart otds (OpenText Directory Services).
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#
# This Helm Chart for OpenText Directory Services includes one subchart:
# - otdsws - OpenText Directory Services frontend
#
# This chart has its own values.yaml but you should just change
# this one - it overwrites the defaults in the subchart.
#
########################################################################
global:
  ## otdsUseReleaseName controls whether the release name is used in 
  ## the names of the objects.
  ## This value should not be changed as part of an upgrade!
  otdsUseReleaseName: false
  ## namespace can be used to deploy to a namespace other than the
  ## default namespace.
  namespace:

## ingress.* settings allow you to connect to the deployment with HTTPS
## and a Fully Qualified Domain Name (FQDN) (DNS entry).
## - enabled defines if a Kubernetes Ingress is used.
## - secret is the name of the TLS / SSL Kubernetes secret for HTTPS
##   connections. If no secret is given, SSL is not activated in the
##   Ingress definition.
##   Create a secrete in Kubernetes with the following kubectl command:
##   kubectl create secret tls <secret name> --cert fullchain.pem --key privkey.pem
## - class is the Ingress class - used for annotations on the different
##   cloud platforms
## - annotations are platform specific annotations of the ingress object
ingress:
  enabled: &otds_ingress_enabled true
  secret:
  class:
  annotations: {}
  ## exposeIndividualEndpoints enables to expose the list of 5 endpoints
  ## "/otds-admin/", "/otdstenant/", "/otdsws/", "/ot-authws/", "/otds-v2/" 
  ## currently supported in OTDS. Otherwise, only root '/' is exposed by default
  exposeIndividualEndpoints: false
  ## paths provide list of endpoints that are associated with OTDS backend. 
  ## Both the host and path should match to route the traffic to the desired 
  ## service properly. The paths are only exposed if exposeIndividualEndpoints is true
  paths:
    - "/otds-admin/"
    - "/otdstenant/"
    - "/otdsws/"
    - "/ot-authws/"
    - "/otds-v2/"

########################################################################
# Directory Services server subchart:
# Don't remove the YAML &anchors - only change the parameters behind!
# (they are used for cross-referencing to avoid repetitive settings)
########################################################################
otdsws:
  ## podLabels list additional pod labels to apply
  ## eg:
  ## podLabels:
  ##   app.kubernetes.io/app_name:  otdsws
  ##   app.kubernetes.io/app_version: 22.3
  podLabels: {}
  ## enabled controls if the OTDS server gets deployed as a container in
  ## Kubernetes. If you have OTDS deployed somewhere else you can set
  ## it to false.
  enabled: true
  ## serviceAccountName defines the name of the service account the
  ## pods are running under. Normally that is 'default'
  serviceAccountName: default
  ## statefulSet controls if the OTDS server gets deployed as a statefulSet
  ## Kubernetes resource. If OTDS needs to have static pod name which is needed
  ## especially in some on-prem scenarios e.g. sync master host.
  statefulSet: false
  ## ingress.* define Ingress specific settings for OTDS
  ingress: 
    enabled: *otds_ingress_enabled
    secret: 
    ## prependPath can be used to prepend a value to the standard OTDS server
    ## path when multiple services share a hostname.  Adding a value of "otds"
    ## would result in the login URL being <publicHostname>/otds/otdsws/login.
    prependPath:
  ## serviceName defines the name of the Kubernetes service for OTDS server:
  serviceName: otdsws
  ## serviceType can be used to override the spec type for the otdsws
  ## service.  If this value is not set the value is defined
  ## based on the value of ingress.enabled.  The type is set to ClusterIP
  ## if ingress is enabled and LoadBalancer if it is disabled.
  serviceType:
  ## carrierGradeNAT can be set to true to configure Tomcat to treat
  ## 100.64.0.0/10 addresses as internal for compatibility with environments
  ## that use Carrier-grade NAT.
  carrierGradeNAT: false
  ## customSecretName defines the name of an already existing secret object. 
  ## This is useful when OTDS charts work as subcharts and parent chart create
  ## a single secret.
  customSecretName: 
  ## replicas for OTDS server:
  replicas: 1
  ## port defines the external port for the OTDS Kubernetes service:
  port: 80
  ## publicHostname defines the FQDN or IP address of the
  ## Kubernetes Services of OTDS. If empty ("") the hostname
  ## will dynamically be determined via the Kubernetes API.
  publicHostname: 
  ## timeZone defines the time zone of the Linux OS within the container. The default value for
  ## the timeZone is Etc/UTC.
  timeZone: Etc/UTC
  ## cryptKey is used for secure synchronized access to backend DB from 
  ## frontend instances
  ## The value is a 16 character ASCII string that has been base64 encoded
  cryptKey: Z2hkN2hyNDBkbWNGcVQ0TA==
  ## additionalJavaOpts defines additional Java parameters for OTDS, which should be
  ## separated by space. For example: "-Dotds.repo.allowduplicateusers=true" to enable 
  ## duplicated user in different partitions.
  additionalJavaOpts:
  ## enableBootstrapConfig enables the use of the config.yml file in the
  ## otdsws chart directory to apply a specific set of configuration options
  ## on the initial run when the DB is populated.
  ## A sample config.yml file is in the otdsws chart directory
  enableBootstrapConfig: false
  ## existingBootstrapConfig can be used to specify the content of the OTDS bootstrap configuration file.
  ## This overrides the configuration files in the chart directory
  existingBootstrapConfig: | 
  ## jvmMemory sets the maximum amount of memory used by the otds-server JVM
  ## If this value is not set, the JVM memory will be set to 75% of
  ## resources.limits.memory if available otherwise 512MiB
  ## Memory amounts in M, Mi, G or Gi are supported
  jvmMemory:
  ## otadminPassword is the password of the otadmin@otds.admin user for OTDS
  ## Note that this password option will only have an impact when initially
  ## populating the backend DB.
  otadminPassword: otds
  ## migration.* defines if migration from OpenDJ should be attempted and
  ## defines how the migration should take place.
  ## There are three different ways migration can take place.
  ## 1. From a legacy OTDS deployment (eg. otds:21.3.0 images), which requires
  ##    usingLegacyImage=true and that legacyImagePVC is specified.
  ##    For this option the minimum memory requirements are increased
  ##    resource.requests.memory=2Gi and resource.limits.memory=3Gi
  ## 2. From an existing OTDS deployment in the same cluster, which requires
  ##    the existing opendj serviceName servicePort and password be specified.
  ## 3. From an external OpenDJ such as a VM deployment, which requires
  ##    the opendjUri (eg. ldap://otds.domain.local:1389) and password
  ##    be specified.
  ## Note that if usingLegacyImage=true other non-relevant values will
  ## be ignored and if opendjUri is specified serviceName and servicePort
  ## will be ignored.
  ## If enabled=true the default values will migrate from the previous
  ## default configuration.
  migration:
      enabled: false
      usingLegacyImage: false
      legacyImagePVC:
      serviceName: opendj
      servicePort: 1389
      opendjUri:
      password: otds
      ## preUpgradeJob.* enables the one-step migration/deployment via pre-upgrade jobs
      ## image.* defines the image parameters (i.e. the kubectl) used for pre-upgrade job
      preUpgradeJob:
        enabled: false
        ## resources.* defines image parameters for data migrate job, for OpenDJ migrate 
        ## the pod's memory should have at minimum 3Gi momory
        resources:
          requests:
            cpu: 0.5
            memory: 3Gi
          limits:
            cpu: 2
            memory: 3Gi
          ## jvmMemory sets the maximum amount of memory used by the OpenDJ migrate JVM
          ## If this value is not set, the JVM memory will be set to 75% of preUgrateJob
          ## resources.limits.memory. Memory amounts in M, Mi, G or Gi are supported
          ## The JVM memory should be set to at least 2Gi as it will be split between OpenDJ and Tomcat.  
          ## For JVM memory <= 4Gi, OpenDJ will take 1.5Gi. 
          ## For 8Gi >= JVM memory > 4Gi, OpenDJ will take 2Gi.  
          ## For JVM memory > 8Gi, OpenDJ will take 3Gi.          
          jvmMemory:
        ## image.* defines image parameters for pre-upgrade job
        image:
          source:
          name: bitnami/kubectl
          tag: latest
  ## otdsdb.* defines the connection information for the DB which is the
  ## backend data storage location for OTDS
  otdsdb:
    ## url specified the url used to connect to the DB for OTDS
    ## The following is a list of sample values.
    ## jdbc:postgresql://postgres.domain.local:5432/otdsdb
    ## jdbc:sqlserver://ms-sql.domain.local:1433;databaseName=otdsdb
    ## jdbc:oracle:thin:@oracle.domain.local:1521:otdsdb
    ## jdbc:sap://hana.domain.local:30015/?databaseName=otdsdb    
    ## For encrypted connection, the list of sample values is as follows
    ## jdbc:postgresql://postgres.domain.local:5432/otdsdb?ssl=true&sslmode=verify-ca&sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory
    ## jdbc:sqlserver://ms-sql.domain.local:1433;databaseName=otdsdb;integratedSecurity=true;encrypt=true;trustServerCertificate=true;sslProtocol=TLSv1.2
    ## jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcps)(HOST=oracle.domain.local)(PORT=2484))(CONNECT_DATA=(SERVICE_NAME=linux11g)))
    ## jdbc:sap://hana.domain.local:30015/?databaseName=otdsdb&encrypt=true
    ## for SSL connection needs to verify server CA certificate via truststore, needs to set enableCustomizedTruststore then 
    ## the helm chart will import root CA certificate into a user writable copy of default Java truststore
    ## for the url which includes sslDBRootCert e.g. postgres SSL connection, the location of sslrootcert is /opt/config/certificates/dbRootCA.crt
    ## jdbc:postgresql://postgres.domain.local:5432/otdsdb?ssl=true&sslmode=verify-ca&sslrootcert=/opt/config/certificates/dbRootCA.crt
    url: jdbc:postgresql://postgres.domain.local:5432/otdsdb
    ## username specifies the account for the DB connection
    username: otds
    ## password specifies the password for the DB account
    password: otds
    ## enableCustomizedTruststore allows to use customized truststore e.g. to validate DB server CA certificate for Oracle or MSSQL
    ## The certificate will be imported into a user writable copy of the truststore which will be used instead of the default Java truststore.  
    ## Note that this may be a security concern due to the truststore being user writable.
    ## If it is for a SSL connection with public signed root CA certificate, just let the parameter not set
    enableCustomizedTruststore: false    
    ## sslDBRootCert is used to accept the content of the DB server custom root CA certificate by set-file option
    ## The certificate will be stored in otds-certs secret and mounted into pod, at the mount point there will be 
    ## The DB root CA certificate file named as "dbRootCA.crt" is located under /opt/config/certificates
    ## If enableCustomizedTruststore is enabled, the certificate will be 
    ## imported into truststore which used to validate server for encrypted DB connection.
    ## If it is for a SSL connection with public signed root CA certificate, just let the parameter not set
    sslDBRootCert: |

  ## image.* defines Docker image location, tags and pull parameters for
  ## OTDS server - you need to adjust this:
  image:
    source: registry.opentext.com
    name: otds-server
    tag: 22.3.0
    pullPolicy: IfNotPresent
    pullSecret:
  ## resource.* define the resource requirements for OTDS:
  resources:
    enabled: true
    requests:
      cpu: 0.5
      memory: 1.5Gi
    limits:
      cpu: 2
      memory: 1.5Gi
  ## newrelic.* define NewRelic settings for OTDS
  ## if customer has NewRelic license and would like to enable NewRelic APM, can configure below settings
  newrelic:
    NEW_RELIC_LICENSE_KEY:
    NEW_RELIC_APP_NAME:
    NEW_RELIC_LOG_FILE_NAME: STDOUT
    NEW_RELIC_LOG_LEVEL: info
    JAVA_OPTS: -javaagent:/opt/newrelic/newrelic.jar
