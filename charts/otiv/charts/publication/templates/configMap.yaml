apiVersion: v1
kind: ConfigMap
metadata:
    name: {{ include "base.resource.name" . }}-configmap
data:
    ACCESS_MODEL: headCheckSource
    ACCESS_CHECK_TIMEOUT_SECONDS: '{{ .Values.accessCheckTimeoutSeconds }}'
    AJIRA_HOST: {{ .Values.global.msgHost }}
    AJIRA_VHOST: /
    AJIRA_PORT: '5672'
    AJIRA_USER: {{ .Values.global.msgUser }}
    AUTHORITY: {{ $.Values.global.publicWebProtocol }}://{{ include "ingress.fqdn" . }}
    CLUSTER_DISCOVERY: kubernetes
    {{ template "cors.config" . }}
    {{ template "forwarded.config" . }}
    CORS_ADDITIONAL_HEADERS_LIST: '{{ .Values.global.customHttpHeaders }}'
    COUNTER: '{{ .Values.global.counter }}'
    ENABLE_ACCESS_CACHE: '{{ .Values.enableAccessCache }}'
    ENABLE_OAUTH: 'true'
    LOG_OUT: {{ default .Values.global.logOutput .Values.logOutput }}
{{- if .Values.loglevel.expiry }}
    LOG_LEVEL_EXPIRY: {{ .Values.loglevel.expiry }}
{{- end }}
{{- if .Values.loglevel.hazelCast }}
    LOG_LEVEL_HAZELCAST: {{ .Values.loglevel.hazelCast }}
{{- end }}
{{- if .Values.loglevel.migrator }}
    LOG_LEVEL_MIGRATOR: {{ .Values.loglevel.migrator }}
{{- end }}
{{- if .Values.loglevel.netty }}
    LOG_LEVEL_NETTY: {{ .Values.loglevel.netty }}
{{- end }}
{{- if .Values.loglevel.service }}
    LOG_LEVEL_SERVICE: {{ .Values.loglevel.service }}
{{- end }}
{{- if .Values.loglevel.spi }}
    LOG_LEVEL_SPI: {{ .Values.loglevel.spi }}
{{- end }}
{{- if .Values.loglevel.spiAjira }}
    LOG_LEVEL_SPI_AJIRA: {{ .Values.loglevel.spiAjira }}
{{- end }}
{{- if .Values.loglevel.spiMkondo }}
    LOG_LEVEL_SPI_MKONDO: {{ .Values.loglevel.spiMkondo }}
{{- end }}
{{- if .Values.loglevel.spiSoteria }}
    LOG_LEVEL_SPI_SOTERIA: {{ .Values.loglevel.spiSoteria }}
{{- end }}
{{- if .Values.loglevel.spiPithos }}
    LOG_LEVEL_SPI_PITHOS: {{ .Values.loglevel.spiPithos }}
{{- end }}
{{- if .Values.loglevel.system }}
    LOG_LEVEL_SYSTEM: {{ .Values.loglevel.system }}
{{- end }}
{{- if .Values.loglevel.util }}
    LOG_LEVEL_UTIL: {{ .Values.loglevel.util }}
{{- end }}
{{- if .Values.loglevel.vertx }}
    LOG_LEVEL_VERTX: {{ .Values.loglevel.vertx }}
{{- end }}
{{- if .Values.loglevel.vertxHost }}
    LOG_LEVEL_VERTX_HOST: {{ .Values.loglevel.vertxHost }}
{{- end }}
    DISCOVERY_REGISTER_POLICY: name
    DISCOVERY_REGISTER_POLICY_NAME: {{ include "base.resource.name" . }}
    MKONDO_BLOB_BASE_URL: {{ $.Values.global.publicWebProtocol }}://otiv-asset{{ include "ingress.suffix" .}}/artifacts
    MKONDO_BLOB_ROOTS: /var/mkondo/fs-0
    MKONDO_STORAGE_DISABLED: 'false'
    KUB_NAMESPACE: {{ .Release.Namespace }}
    {{- template "new.relic.transform.config" . }}
    OTDS_ORIGIN: {{ template "otds.api.url" .}}
    PEER_REST_PORT: '{{ .Values.service.port }}'
    PORT: '{{ .Values.service.targetPort }}'
    PITHOS_PROVIDER: postgresql
    PITHOS_HOST: {{ .Values.global.database.hostname }}
    PITHOS_PORT: '{{ .Values.global.database.port }}'
    PITHOS_DB: {{ .Values.global.database.ivName }}
    PITHOS_PSQL_DB: {{ .Values.global.database.adminDatabase }}
    PITHOS_USER: {{ .Values.global.database.adminUsername }}
    PITHOS_USE_SSL: '{{ .Values.global.database.ssl }}'
    PITHOS_SSL_MODE: '{{ .Values.global.database.sslMode }}'
    {{- template "proxy.url.params" . }}
    SOTERIA_PROVIDER: otds
    {{- template "timezone" . }}
    {{ template "trusted.source.origins" . }}
    __VERSION__: '{{ template "version.stamp" . }}'
